type Vault @entity(immutable: false) {
  id: ID!
  trader: Bytes! # address
  positionId: BigInt!
  assetType: String! # "TSLA" or "APPL"
  mintedAmount: BigInt!
  bufferCollateral: BigInt! # USDC (6 decimals)
  hedgedCollateral: BigInt! # USDC (6 decimals)
  entryPrice: BigInt! # 18 decimals
  createdAt: BigInt! # timestamp
  closedAt: BigInt # timestamp
  isActive: Boolean!
  burnedAmount: BigInt # at closure
  amountRefunded: BigInt # USDC (6 decimals)
  redemptionFee: BigInt # USDC (6 decimals)
}

type Position @entity (immutable: false) {
  id: ID!
  trader: Bytes! # address
  mintedAmount: BigInt!
  bufferCollateral: BigInt! # USDC (6 decimals)
  hedgedCollateral: BigInt! # USDC (6 decimals)
  entryPrice: BigInt! # 18 decimals
  positionIndex: BigInt!
  timestamp: BigInt!
  assetType: String! # "TSLA" or "APPL"
  paidOut: Boolean!
  isActive: Boolean!
  closedTimestamp: BigInt
  amountRefunded: BigInt
  redemptionFee: BigInt
}

type Withdrawal @entity(immutable: true) {
  id: ID!
  trader: Bytes! # address
  amountUSDC: BigInt! # USDC (6 decimals)
  assetType: String! # "TSLA" or "APPL"
  timestamp: BigInt!
}

type FundingSettlement @entity(immutable: true) {
  id: ID!
  asset: String! # "TSLA" or "APPL"
  delta: BigInt! # Signed amount (positive = gain, negative = loss)
  date: BigInt!
}

type FeeCollection @entity(immutable: true) {
  id: ID!
  user: Bytes! # address
  amountUSDC: BigInt! # USDC (6 decimals)
  type: String! # "MINT" or "REDEMPTION"
  timestamp: BigInt!
}

type PerpEngineUpdate @entity(immutable: true) {
  id: ID!
  newPerp: Bytes! # address
  timestamp: BigInt!
}

type ProtocolMetric @entity(immutable: false) {
  id: ID! # "global"
  totalTSLABuffer: BigInt!
  totalAPPLBuffer: BigInt!
  totalTSLADebt: BigInt!
  totalAPPLDebt: BigInt!
}

# --- Perp Engine Entities ---

enum PerpPositionStatus {
  Open
  Closed
  Liquidated
}

type PerpPosition @entity(immutable: false) {
  id: ID! # user-asset
  user: Bytes!
  asset: String!
  sizeUsd: BigInt!
  collateral: BigInt!
  entryPrice: BigInt!
  isLong: Boolean!
  status: PerpPositionStatus!
  openedAt: BigInt!
  lastUpdatedAt: BigInt!
  closedAt: BigInt
  totalPnl: BigInt
}

type PerpFundingUpdate @entity(immutable: true) {
  id: ID! # txHash-logIndex
  asset: String!
  hourlyFundingRate: BigInt!
  newCumulativeFundingRate: BigInt!
  timestamp: BigInt!
}

type PerpLiquidation @entity(immutable: true) {
  id: ID! # txHash-logIndex
  position: PerpPosition!
  liquidator: Bytes!
  user: Bytes!
  penalty: BigInt!
  timestamp: BigInt!
}

type VaultHedge @entity(immutable: false) {
  id: ID! # asset (e.g., "TSLA")
  asset: String!
  sizeUsd: BigInt!
  collateral: BigInt!
  entryPrice: BigInt!
  lastUpdatedAt: BigInt!
}

# --- Receiver Contract Entities ---

enum CCIPMessageStatus {
  Received
  Processed
  Failed
}

type CCIPMessage @entity(immutable: false) {
  id: ID! # messageId
  messageId: Bytes!
  sourceChainSelector: BigInt!
  sender: Bytes!
  data: Bytes!
  token: Bytes!
  tokenAmount: BigInt!
  status: CCIPMessageStatus!
  timestamp: BigInt!
}

type CCIPMessageFailed @entity(immutable: true) {
  id: ID! # messageId
  messageId: Bytes!
  reason: Bytes!
  timestamp: BigInt!
}